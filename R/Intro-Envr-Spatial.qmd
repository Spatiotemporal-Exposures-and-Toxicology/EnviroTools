---
title: "Intro-Environmental-Spatial-Analysis"
author: Mitchell Manware, Kyle P Messier
format: html
editor: visual
---

## Introduction to Spatial Analysis with Environmental Data

Environmental research relies on various types of spatial, temporal, and spatio-temporal data to accurately measure, predict, and model exposures.

This vignette will introduce packages equipped to handle the various types of data often used in environmental research, will teach how to load/read each type of data into R, and how to perform simple/basic/primary analyses.

#### Notes

This vignette outline was developed without detailed text explaining the reasoning for each step in the exploratory analyses.

## Data

This vignette utilizes various free and publicly available spatial data sets. Access to individual files is included in the code, but a high level description of each data set can be located for the following sources.

| Data                                | Producer                                               | Link                                                                                        |
|------------------|-------------------|------------------------------------|
| PM~2.5~ Daily Observations          | Environmental Protection Agency (EPA)                  | <https://aqs.epa.gov/aqsweb/airdata/download_files.html>                                    |
| HMS Fire and Smoke Product          | National Oceanic and Atmospheric Administration (NOAA) | <https://www.ospo.noaa.gov/Products/land/hms.html>                                          |
| United States Cartographic Boundary | United States Census Bureau                            | <https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html> |
| RASTER DATA PLACEHOLDER             | RASTER DATA PLACEHOLDER                                | RASTER DATA PLACEHOLDER                                                                     |

: Exploratory analyses data sources

## 0. Introduction

#### Download and Load Packages

```{r, warning=FALSE, message=FALSE, results=FALSE}
# may require R to restart
vignette_packages <- c("sf","terra", "ggplot2", "ggpubr",
                       "dplyr", "exactextractr", "sftime",
                       "stars", "tidyterra")

for(v in 1:length(vignette_packages)){
  if (vignette_packages[v] %in% installed.packages() == FALSE){
    install.packages(vignette_packages[v])
  }
}

library(sf); library(terra); library(ggplot2); library(ggpubr);
library(dplyr); library(exactextractr); library(sftime); library(stars);
library(tidyterra)
```

## 1. Point Data with `sf`

### 1.0 Access and download

Set link to data access URL and specify saving location.

```{r, results=FALSE, warning=FALSE, message=FALSE, results='hide', eval=FALSE}
# specify the URL where data is stored
url_epa <- "https://aqs.epa.gov/aqsweb/airdata/daily_88101_2021.zip"

# specify where to save downloaded data
destination_epa <- "/   YOUR FILE PATH   /epa_data.zip"

# download the data
download.file(url_epa,
              destination_epa)
```

```{r, include = FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
url_epa <- "https://aqs.epa.gov/aqsweb/airdata/daily_88101_2021.zip"
destination_epa <- "/Volumes/SET/Projects/EnviroTools/EnviroTools/input/epa_data.zip"
download.file(url_epa,
              destination_epa)
```

Unzip downloaded zip files.

```{r, warning=FALSE, message=FALSE, results=FALSE}
unzip("/   YOUR FILE PATH   /epa_data.zip")
```

```{r, include=FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
utils::unzip("/Volumes/SET/Projects/EnviroTools/input/epa_data.zip",
             exdir = "/Volumes/SET/Projects/EnviroTools/EnviroTools/input")
```

Identify file name.

```{r, warning=FALSE, message=FALSE, results=FALSE}
list.files("/   YOUR FILE PATH   /")
```

```{r, echo=FALSE}
###########################################
list.files("/Volumes/SET/Projects/EnviroTools/EnviroTools/input")
###########################################
```

### 1.1 Import data with `sf::st_read()`

```{r, eval=FALSE}
pm <- st_read("/   YOUR FILE PATH   /daily_88101_2021.csv")
```

```{r, echo=FALSE, warning=TRUE, cache=TRUE, results='hide'}
###########################################
pm <- st_read("/Volumes/SET/Projects/EnviroTools/EnviroTools/input/daily_88101_2021.csv")
###########################################
```

### 1.2 Inspect contents

```{r}
str(pm)
```

### 1.3 Subset to parameters of interest

```{r}
pm <- subset(pm, select=c(State.Code,
                          County.Code,
                          Site.Num,
                          Latitude,
                          Longitude,
                          State.Name,
                          Date.Local,
                          Arithmetic.Mean))
str(pm)
```

### 1.4 Reclassify parameters of interest

```{r}
pm$Date.Local <- as.Date(pm$Date.Local)
pm$Arithmetic.Mean <- as.numeric(pm$Arithmetic.Mean)
```

#### 1.4.1 Ensure proper reclassification

```{r}
class(pm$Date.Local); class(pm$Arithmetic.Mean)
```

### 1.5 Convert data frame to `sf` object

```{r}
pm_sf <- st_as_sf(pm,
                  coords=c("Longitude", "Latitude"))
```

#### 1.5.1 Check class of `pm_sf`

```{r}
class(pm_sf); class(pm_sf$geometry)
```

### 1.6 Check coordinate reference system

```{r}
st_crs(pm_sf)
```

#### 1.6.1 Set coordinate reference system

```{r}
st_crs(pm_sf) <- "EPSG:4326"
st_crs(pm_sf)
```

### 1.7 Plot point locations with `ggplot2`

```{r}
ggplot()+
  geom_sf(data=pm_sf)+
  ggtitle("EPA PM2.5 Monitoring Locations (2021)")+
  theme_pubr()+
  grids()
```

### 1.8 Inspect parameter of interest

```{r}
summary(pm_sf$Arithmetic.Mean); sd(pm_sf$Arithmetic.Mean)
```

#### 1.8.1 Plot distribution of parameter of interest

```{r}
ggplot(data=pm_sf,
       aes(Arithmetic.Mean))+
  geom_histogram(binwidth = 5)+
  ggtitle("EPA PM2.5 Measurements (2021)")+
  xlab("PM2.5 Concentration")+
  ylab("Number of Measurements")+
  theme_pubr()
```

### 1.9 Create monitor identification code

```{r}
pm_sf$Monitor.ID <- paste0(pm_sf$State.Code,
                           pm_sf$County.Code,
                           pm_sf$Site.Num)
```

#### 1.9.1 Check the number of unique monitor codes

```{r}
length(unique(pm_sf$Monitor.ID))==length(unique(pm_sf$geometry))
```

### 1.10 Calculate annual mean concentration for monitor locations

```{r, warning=FALSE, message=FALSE}
pm_mean <-
  pm_sf %>%
  group_by(Monitor.ID, State.Name) %>%
  summarise(Annual.Mean=mean(Arithmetic.Mean))
```

### 1.11 Plot annual mean concentrations

```{r}
ggplot()+
  geom_sf(data=pm_mean,
          aes(color=Annual.Mean))+
  scale_color_viridis_b(expression("PM2.5 Concentration (µg/m"^3*")"))+
  ggtitle("Annual Mean PM2.5 Concentration at EPA Monitoring Locations")+
  theme_pubr(legend="right")+
  grids()
```

### 1.12 Explore monitors with highest mean concentrations

#### 1.12.1 Identify three monitors with highest concentrations

```{r}
max_monitors <-
  pm_mean %>%
  arrange(Annual.Mean) %>%
  tail(n=3)
```

#### 1.12.2 Create variable with these monitors' monitor IDs

```{r}
max_monitors_id <- max_monitors$Monitor.ID
```

#### 1.12.3 Create subset of data with only these monitors

```{r}
pm_max <- subset(pm_sf,
                 subset=Monitor.ID==max_monitors_id)
```

#### 1.12.4 Plot time trend of observations at these monitor locations

```{r}
ggplot(data=pm_max,
       aes(x=Date.Local,
           y=Arithmetic.Mean,
           group=Monitor.ID,
           color=Monitor.ID))+
  geom_line()+
  ggtitle("Highest Annual Mean Concentrations of PM2.5")+
  facet_wrap(~Monitor.ID,
             nrow = 3)+
  xlab("Date")+
  ylab(expression("PM2.5 Concentration (µg/m"^3*")"))+
  theme_pubr(legend = "right")
```

#### 1.12.5 Box plot to compare observations at these monitor locations

```{r}
ggplot(data=pm_max,
       aes(x=Monitor.ID,
           y=Arithmetic.Mean,
           fill=Monitor.ID))+
  geom_boxplot()+
  xlab("Monitor ID")+
  ylab(expression("PM2.5 Concentration (µg/m"^3*")"))+
  theme_pubr(legend="none")
```

# ============= BREAK ==============

## 2. Polygon Data

### 2.0 Access and download

Define day, year, and month of interest

```{r, results=FALSE, warning=FALSE, message=FALSE, results='hide'}
day = "01"
month = "09"
year = "2023"
```

Set link to data access URL and specify saving location.

```{r, results=FALSE, warning=FALSE, message=FALSE, results='hide', eval=FALSE}
# specify the URL where data is stored based on date variables of interest
url_noaa <- paste0("https://satepsanone.nesdis.noaa.gov/pub/FIRE/web/HMS/Smoke_Polygons/Shapefile/",
                   year,
                   "/",
                   month,
                   "/hms_smoke",
                   year,
                   month,
                   day,
                   ".zip")

# specify where to save downloaded data
destination_noaa <- paste0("/   YOUR FILE PATH   /noaa_smoke",
                           year,
                           month,
                           day,
                           ".zip")

# download the data
download.file(url_noaa,
              destination_noaa)
```

```{r, include = FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
url_noaa <- paste0("https://satepsanone.nesdis.noaa.gov/pub/FIRE/web/HMS/Smoke_Polygons/Shapefile/",
                   year,
                   "/",
                   month,
                   "/hms_smoke",
                   year,
                   month,
                   day,
                   ".zip")
destination_noaa <- paste0("/Volumes/SET/Projects/EnviroTools/input/noaa_smoke",
                           year,
                           month,
                           day,
                           ".zip")
download.file(url_noaa, destination_noaa)
```

Unzip downloaded file.

```{r, warning=FALSE, message=FALSE, results=FALSE}
unzip("/   YOUR FILE PATH   /noaa_smoke20230901.zip")
```

```{r, include=FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
unzip("/Volumes/SET/Projects/EnviroTools/input/noaa_smoke20230901.zip",
      exdir = "/Volumes/SET/Projects/EnviroTools/EnviroTools/input")
```

Identify file name.

```{r, warning=FALSE, message=FALSE, results=FALSE}
list.files("/   YOUR FILE PATH   /")
```

```{r, echo=FALSE}
###########################################
list.files("/Volumes/SET/Projects/EnviroTools/EnviroTools/input")
###########################################
```

### 2.1 Polygon data with `sf`

#### 2.1.1 Import

```{r, eval=FALSE}
smoke <- st_read("/   YOUR FILE PATH   /hms_smoke20230901.shp")
```

```{r, echo=FALSE, warning=TRUE, cache=TRUE, results='hide'}
###########################################
smoke <- st_read("/Volumes/SET/Projects/EnviroTools/EnviroTools/input/hms_smoke20230901.shp")
###########################################
```

#### 2.1.2 Inspect contents

```{r}
str(smoke); st_crs(smoke)
```

#### 2.1.3 Inspect parameter of interest

```{r}
unique(smoke$Density); class(smoke$Density)
```

#### 2.1.4 Reclassify parameter of interest

```{r}
smoke$Density <- factor(smoke$Density,
                        levels=c("Light", "Medium", "Heavy"))
```

#### 2.1.5 Plot polygons with `ggplot2`

```{r}
ggplot()+
  geom_sf(data=smoke,
          aes(fill=Density))+
  scale_fill_manual("Smoke Density",
                    values=c("lightgreen", "lightgoldenrod", "tomato"))+
  ggtitle("Wildfire Smoke Plumes (September 1, 2023)")+
  theme_pubr(legend="bottom")
```

#### 2.1.6 Combine polygons based on density classification

Create variable with density types.

```{r}
dens <- unique(smoke$Density)
```

Union polygons by density type with new date column.

```{r}
smoke_density <-
  smoke %>%
  group_by(Density) %>%
  summarise(geometry=st_union(geometry),
            Date=paste0(year,
                        month,
                        day))
```

Plot union-ed polygons.

```{r}
ggplot()+
  geom_sf(data=smoke_density,
          aes(fill=Density))+
  scale_fill_manual("Smoke Density",
                    values=c("lightgreen", "lightgoldenrod", "tomato"))+
  ggtitle("Wildfire Smoke Plumes (September 1, 2023)")+
  theme_pubr(legend="bottom")
```

#### 2.1.6 Import United States state boundary polygon data

Set link to data access URL and specify saving location.

```{r, eval=FALSE}
# specify the URL where data is stored
url_states <- "https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip"

# specify where to save downloaded data
destination_states <- "/   YOUR FILE PATH   /states.zip"

# download the data
download.file(url_states,
              destination_states)
```

```{r, include = FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
url_states <- "https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_500k.zip"
destination_states <- "/Volumes/SET/Projects/EnviroTools/input/states.zip"
download.file(url_states,
              destination_states)
```

Unzip downloaded data.

```{r, eval=FALSE}
unzip("/   YOUR FILE PATH   /states.zip")
```

```{r, include=FALSE, eval=FALSE}
###########################################
## NEED TO CHANGE eval=TRUE for publication
###########################################
unzip("/Volumes/SET/Projects/EnviroTools/input/states.zip",
      exdir = "/Volumes/SET/Projects/EnviroTools/input")
```

Identify file name.

```{r, eval=FALSE}
list.files("/   YOUR FILE PATH   /")
```

```{r, echo=FALSE}
###########################################
list.files("/Volumes/SET/Projects/EnviroTools/EnviroTools/input")
###########################################
```

Import data.

```{r, eval=FALSE}
states <- st_read("/   YOUR FILE PATH   /cb_2018_us_state.shp")
```

```{r, include=FALSE}
###########################################
states <- st_read("/Volumes/SET/Projects/EnviroTools/EnviroTools/input/cb_2018_us_state_500k.shp")
###########################################
```

Inspect United States polygons.

```{r}
str(states); st_crs(states)
```

Subset to contiguous United States.

```{r}
# define list of state and territories to be removed
remove <- c("Alaska",
            "Hawaii",
            "Puerto Rico",
            "United States Virgin Islands",
            "Commonwealth of the Northern Mariana Islands",
            "Guam",
            "American Samoa")

# remove states and territories
conus <- subset(states,
                !NAME %in% remove)
```

Plot contiguous United States boundaries.

```{r}
ggplot()+
  geom_sf(data=conus)+
  ggtitle("Contiguous United States Boundaries")+
  theme_pubr()
```

#### 2.1.7 Plot smoke plumes and state boundaries `sf`

Set matching coordinate reference systems.

```{r, warning=FALSE}
st_crs(smoke_density) <- st_crs(conus)
st_crs(smoke_density)==st_crs(conus)
```

Set matching projections (Albers Equal Area).

```{r}
smoke_density <- st_transform(smoke_density,
                              5070)
conus <- st_transform(conus,
                      5070)
```

Create plot.

```{r}
ggplot()+
  geom_sf(data=smoke_density,
          aes(fill=Density))+
  scale_fill_manual("Smoke Density",
                    values=c("lightgreen", "lightgoldenrod", "tomato"))+
  geom_sf(data=conus,
          fill="transparent")+
  ggtitle("Wildfire Smoke Plumes (September 1, 2023)")+
  theme_pubr(legend="bottom")
```

#### 2.1.8 Crop smoke polygons to contiguous United States bounding box

```{r, warning=FALSE}
smoke_crop <- st_crop(smoke_density,
                      conus)
```

#### 2.1.9 Plot cropped smoke polygons.

```{r}
ggplot()+
  geom_sf(data=smoke_crop,
          aes(fill=Density))+
  scale_fill_manual("Smoke Density",
                    values=c("lightgreen", "lightgoldenrod", "tomato"))+
  geom_sf(data=conus,
          fill="transparent")+
  ggtitle("Wildfire Smoke Plumes (September 1, 2023)")+
  theme_pubr(legend="bottom")
```

# ============= BREAK ==============

### 2.2 Polygon data with `terra`

#### 2.2.0 Access and download same as with `sf`

#### 2.2.1 Import (wildfire and boundary data)

```{r, eval=FALSE}
smoke_t <- vect("/   YOUR FILE PATH   /hms_smoke20230901.shp")
states_t <- vect("/   YOUR FILE PATH   /cb_2018_us_state_500k.shp")
```

```{r, echo=FALSE, warning=TRUE, cache=TRUE, results='hide'}
###########################################
smoke_t <- vect("/Volumes/SET/Projects/EnviroTools/EnviroTools/input/hms_smoke20230901.shp")
states_t <- vect("/Volumes/SET/Projects/EnviroTools/EnviroTools/input/cb_2018_us_state_500k.shp")
###########################################
```

#### 2.2.2 Inspect contents

```{r}
str(smoke_t); str(states_t)
```

#### 2.2.3 Set up parameters of interest

```{r}
smoke_t$Density <- factor(smoke_t$Density,
                          levels=c("Light", "Medium", "Heavy"))
conus_t <- subset(states_t,
                  !states_t$NAME %in% remove)
```

#### 2.2.4 Set matching coordinate reference systems and projections

```{r}
crs(smoke_t) <- crs(conus_t)
smoke_t <- project(smoke_t,
                   "EPSG:5070")
conus_t <- project(conus_t,
                   "EPSG:5070")
```

#### 2.2.5 Combine polygons based on density classification

```{r}
smoke_density_t <- terra::aggregate(smoke_t,
                                    by="Density",
                                    dissolve=TRUE)
```

New `smoke_density_t` is SpatVector with 3 geometries.

```{r}
smoke_density_t
```

#### 2.2.6 Plot smoke plumes and state boundaries `terra`

```{r}
ggplot()+
  geom_spatvector(data=smoke_density_t,
                  aes(fill=Density))+
  scale_fill_manual("Smoke Density",
                    values=c("lightgreen", "lightgoldenrod", "tomato"))+
  geom_spatvector(data=conus_t,
                  fill="transparent")+
  ggtitle("Wildfire Smoke Plumes (September 1, 2023)")+
  theme_pubr(legend="bottom")
```

#### 2.2.7 Identify presence of smoke plumes in each state

Identify where smoke polygons intersect state boundaries.

```{r}
conus_smoke <- data.frame(t(relate(smoke_density_t,
                                   conus_t,
                                   relation="intersects")))
```

Set column names to match density type.

```{r}
colnames(conus_smoke) <- c("Light", "Medium", "Heavy")
```

Combine smoke plume coverage presence with state boundaries.

```{r}
conus_t <- cbind(conus_t,
                 conus_smoke)
```

#### 2.2.8 Compare presence of smoke plume coverage across states

New variable with smoke density classifications as character.

```{r}
dens_c <- c("Light", "Medium", "Heavy")
```

For loop creating identification plots for each density type.

```{r, warning=FALSE}
for(d in 1:length(dens_c)){
  
  # define color palette based on smoke density
  if(dens_c[d]=="Light"){
    color_values <- c("lightgrey", "lightgreen")
  } else if(dens_c[d]=="Medium"){
    color_values <- c("lightgrey", "lightgoldenrod")
  } else if(dens_c[d]=="Heavy"){
    color_values <- c("lightgrey", "tomato")
  }
  
  print(
    ggplot()+
      geom_spatvector(data=conus_t,
                      aes_string(fill=dens_c[d]))+
      scale_fill_manual(paste0(dens_c[d],
                               " Smoke Plume Coverage Present"),
                        values=color_values)+
      theme_pubr(legend="bottom")
  )
  
}
```

# ============= BREAK ==============

## 3. Raster Data

### 3.0 Access and download
